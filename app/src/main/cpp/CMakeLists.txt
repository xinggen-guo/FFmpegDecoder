# For more information about using CMake with Android Studio, read the
# documentation: https://d.android.com/studio/projects/add-native-code.html

# Sets the minimum version of CMake required to build the native library.

cmake_minimum_required(VERSION 3.4.1)

include_directories(./ffmpeg/include)

# Declares and names the project.

#set(FFMPEG_DIR /ffmpeg)

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -L${CMAKE_SOURCE_DIR}/ffmpeg/armeabi-v7a")

##ffmpeg 导入
#add_library(avcodec
#        STATIC
#        IMPORTED)
#set_target_properties(avcodec
#        PROPERTIES IMPORTED_LOCATION
#        ${FFMPEG_DIR}/armeabi/libavcodec.a)
#
#add_library(avdevice
#        STATIC
#        IMPORTED)
#set_target_properties(avdevice
#        PROPERTIES IMPORTED_LOCATION
#        ${FFMPEG_DIR}/armeabi/libavdevice.a)
#
#add_library(avformat
#        STATIC
#        IMPORTED)
#set_target_properties(avformat
#        PROPERTIES IMPORTED_LOCATION
#        ${FFMPEG_DIR}/armeabi/libavformat.a)
#
#add_library(avutil
#        STATIC
#        IMPORTED)
#set_target_properties(avutil
#        PROPERTIES IMPORTED_LOCATION
#        ${FFMPEG_DIR}/armeabi/libavutil.a)
#
#add_library(postproc
#        STATIC
#        IMPORTED)
#set_target_properties(postproc
#        PROPERTIES IMPORTED_LOCATION
#        ${FFMPEG_DIR}/armeabi/libpostproc.a)
#
#add_library(swresample
#        STATIC
#        IMPORTED)
#set_target_properties(swresample
#        PROPERTIES IMPORTED_LOCATION
#        ${FFMPEG_DIR}/armeabi/libswresample.a)
#
#add_library(swscale
#        STATIC
#        IMPORTED)
#set_target_properties(swscale
#        PROPERTIES IMPORTED_LOCATION
#        ${FFMPEG_DIR}/armeabi/libswscale.a)
#
#add_library(avfilter
#        STATIC
#        IMPORTED)
#set_target_properties(avfilter
#        PROPERTIES IMPORTED_LOCATION
#        ${FFMPEG_DIR}/armeabi/libavfilter.a)

# Creates and names a library, sets it as either STATIC
# or SHARED, and provides the relative paths to its source code.
# You can define multiple libraries, and CMake builds them for you.
# Gradle automatically packages shared libraries with your APK.

add_library( # Sets the name of the library.
        ffmpegdecoder

        # Sets the library as a shared library.
        SHARED
        # Provides a relative path to your source file(s).
        native-lib.cpp)

# Searches for a specified prebuilt library and stores the path as a
# variable. Because CMake includes system libraries in the search path by
# default, you only need to specify the name of the public NDK library
# you want to add. CMake verifies that the library exists before
# completing its build.

find_library( # Sets the name of the path variable.
        log-lib

        # Specifies the name of the NDK library that
        # you want CMake to locate.
        log)

# Specifies libraries CMake should link to your target library. You
# can link multiple libraries, such as libraries you define in this
# build script, prebuilt third-party libraries, or system libraries.

#target_link_libraries( # Specifies the target library.
#        ffmpegdecoder
#        ${avfilter}
#        ${avcodec}
#        ${avdevice}
#        ${avformat}
#        ${avutil}
#        ${postproc}
#        ${swresample}
#        ${swscale}
#        ${lame}
#        # Links the target library to the log library
#        # included in the NDK.
#        ${log-lib})

target_link_libraries( # Specifies the target library.
        ffmpegdecoder
        avformat avcodec avfilter avutil swresample swscale
        # Links the target library to the log library
        # included in the NDK.
        ${log-lib}
        z)